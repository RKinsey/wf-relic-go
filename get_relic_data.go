package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const market_url string = "https://api.warframe.market/v1/items/"
const relic_url string = "https://drops.warframestat.us/data/relics.json"

type AutoGenerated struct {
	Relics []struct {
		Tier      string `json:"tier"`
		RelicName string `json:"relicName"`
		State     string `json:"state"`
		Rewards   []struct {
			ID       string `json:"_id"`
			ItemName string `json:"itemName"`
			Rarity   string `json:"rarity"`
			Chance   int    `json:"chance"`
		} `json:"rewards"`
		ID string `json:"_id"`
	} `json:"relics"`
}

func get_relics() {
	resp, err := http.Get(relic_url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, readerr := ioutil.ReadAll(resp.Body)
	fmt.Println("3")
	if readerr != nil {
		log.Fatal(readerr)
	}
	fmt.Println(resp)
	var relicPage AutoGenerated

	jsonerr := json.Unmarshal(body, &relicPage)
	fmt.Println("4")
	if jsonerr != nil {
		log.Fatal(jsonerr)
		//return err
	}
	client, _ := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	client.Connect(ctx)
	r_coll := client.Database("warframe").Collection("relics")
	i_coll := client.Database("warframe").Collection("items")
	for i, relic := range relicPage.Relics {

	}
}

func main() {
	get_relics()
}
