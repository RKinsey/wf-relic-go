package main

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"sync"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const marketURL string = "https://api.warframe.market/v1/items/"
const relicURL string = "https://drops.warframestat.us/data/relics.json"

//AutoGenerated is a struct for the Warframestat Relic API JSON
type Relic struct {
	Tier      string `json:"tier"`
	RelicName string `json:"relicName"`
	State     string `json:"state"`
	Rewards   []struct {
		ID       string  `json:"_id"`
		ItemName string  `json:"itemName"`
		Rarity   string  `json:"rarity"`
		Chance   float64 `json:"chance"`
	} `json:"rewards"`
	ID string `json:"_id"`
}

//Relic struct for BSON
type RelicBSON struct {
	Tier      string
	RelicName string
	State     string
	Reward_ID []string
	ID        string
}
type AutoGenerated struct {
	Relics []Relic //`json:"relics"`
}

func getRelics(mongourl string) {
	resp, err := http.Get(relicURL)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, readerr := ioutil.ReadAll(resp.Body)
	if readerr != nil {
		log.Fatal(readerr)
	}
	relicPage := AutoGenerated{}

	jsonerr := json.Unmarshal(body, &relicPage)
	if jsonerr != nil {
		log.Fatal(jsonerr)
		//return err
	}
	//client, _ := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
	client, _ := mongo.NewClient(options.Client().ApplyURI(mongourl))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	client.Connect(ctx)
	rColl := client.Database("warframe").Collection("relics")
	iColl := client.Database("warframe").Collection("items")
	inserted := new(sync.Map)
	for _, relic := range relicPage.Relics {
		rColl.Indexes()
		handleRelic(rColl, iColl, &relic, inserted, &ctx)
		iColl.Indexes()
	}
	client.Disconnect(ctx)
}
func RelicToBSON(relic *Relic) bson.M {
	item_ids := make([]string, len(relic.Rewards))
	for i, rel := range relic.Rewards {
		item_ids[i] = rel.ID
	}
	return bson.M(RelicBSON{Tier: relic.Tier, RelicName: relic.RelicName, State: relic.State, Reward_ID: item_ids})
}
func handleRelic(relicCollection, itemCollection *mongo.Collection, relic *Relic, inserted *sync.Map, ctx *context.Context) (err error) {
	r := RelicToBSON(relic)
	res, err := relicCollection.InsertOne(r)
	return nil
}
func main() {
	if len(os.Args) != 2 {
		log.Fatalln("Usage: get_relic_data [mongo url]")
	}
	mongoURL, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		log.Fatalln("Argument should be a file with the URL of your mongodb server")
	}
	getRelics(string(mongoURL))
}
